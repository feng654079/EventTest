sil_stage canonical

import Builtin
import Swift
import SwiftShims

struct AAA {
  @_hasStorage let value1: Int { get }
  @_hasStorage let value2: Int8 { get }
  @_hasStorage let value3: String { get }
  init(value1: Int, value2: Int8, value3: String)
}

class BBB {
  @_hasStorage final let value1: Int { get }
  @_hasStorage final let value2: Int8 { get }
  @_hasStorage final let value3: String { get }
  init(value1: Int, value2: Int8, value3: String)
  @objc deinit
}

@_hasStorage @_hasInitialValue let bbb: BBB { get }

// bbb
sil_global hidden [let] @$s4Test3bbbAA3BBBCvp : $BBB

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s4Test3bbbAA3BBBCvp              // id: %2
  %3 = global_addr @$s4Test3bbbAA3BBBCvp : $*BBB  // user: %17
  %4 = metatype $@thick BBB.Type                  // user: %16
  %5 = integer_literal $Builtin.Int64, 1          // user: %6
  %6 = struct $Int (%5 : $Builtin.Int64)          // user: %16
  %7 = integer_literal $Builtin.Int8, 2           // user: %8
  %8 = struct $Int8 (%7 : $Builtin.Int8)          // user: %16
  %9 = string_literal utf8 "3"                    // user: %14
  %10 = integer_literal $Builtin.Word, 1          // user: %14
  %11 = integer_literal $Builtin.Int1, -1         // user: %14
  %12 = metatype $@thin String.Type               // user: %14
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %13 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %14
  %14 = apply %13(%9, %10, %11, %12) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %16
  // function_ref BBB.__allocating_init(value1:value2:value3:)
  %15 = function_ref @$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfC : $@convention(method) (Int, Int8, @owned String, @thick BBB.Type) -> @owned BBB // user: %16
  %16 = apply %15(%6, %8, %14, %4) : $@convention(method) (Int, Int8, @owned String, @thick BBB.Type) -> @owned BBB // user: %17
  store %16 to %3 : $*BBB                         // id: %17
  %18 = integer_literal $Builtin.Int32, 0         // user: %19
  %19 = struct $Int32 (%18 : $Builtin.Int32)      // user: %20
  return %19 : $Int32                             // id: %20
} // end sil function 'main'

// AAA.value1.getter
sil hidden [transparent] @$s4Test3AAAV6value1Sivg : $@convention(method) (@guaranteed AAA) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $AAA):
  debug_value %0 : $AAA, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $AAA, #AAA.value1      // user: %3
  return %2 : $Int                                // id: %3
} // end sil function '$s4Test3AAAV6value1Sivg'

// AAA.value2.getter
sil hidden [transparent] @$s4Test3AAAV6value2s4Int8Vvg : $@convention(method) (@guaranteed AAA) -> Int8 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $AAA):
  debug_value %0 : $AAA, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $AAA, #AAA.value2      // user: %3
  return %2 : $Int8                               // id: %3
} // end sil function '$s4Test3AAAV6value2s4Int8Vvg'

// AAA.value3.getter
sil hidden [transparent] @$s4Test3AAAV6value3SSvg : $@convention(method) (@guaranteed AAA) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $AAA):
  debug_value %0 : $AAA, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $AAA, #AAA.value3      // users: %4, %3
  retain_value %2 : $String                       // id: %3
  return %2 : $String                             // id: %4
} // end sil function '$s4Test3AAAV6value3SSvg'

// AAA.init(value1:value2:value3:)
sil hidden @$s4Test3AAAV6value16value26value3ACSi_s4Int8VSStcfC : $@convention(method) (Int, Int8, @owned String, @thin AAA.Type) -> @owned AAA {
// %0 "$implicit_value"                           // user: %4
// %1 "$implicit_value"                           // user: %4
// %2 "$implicit_value"                           // user: %4
// %3 "$metatype"
bb0(%0 : $Int, %1 : $Int8, %2 : $String, %3 : $@thin AAA.Type):
  %4 = struct $AAA (%0 : $Int, %1 : $Int8, %2 : $String) // user: %5
  return %4 : $AAA                                // id: %5
} // end sil function '$s4Test3AAAV6value16value26value3ACSi_s4Int8VSStcfC'

// BBB.value1.getter
sil hidden [transparent] @$s4Test3BBBC6value1Sivg : $@convention(method) (@guaranteed BBB) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $BBB):
  debug_value %0 : $BBB, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $BBB, #BBB.value1    // user: %3
  %3 = load %2 : $*Int                            // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4Test3BBBC6value1Sivg'

// BBB.value2.getter
sil hidden [transparent] @$s4Test3BBBC6value2s4Int8Vvg : $@convention(method) (@guaranteed BBB) -> Int8 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $BBB):
  debug_value %0 : $BBB, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $BBB, #BBB.value2    // user: %3
  %3 = load %2 : $*Int8                           // user: %4
  return %3 : $Int8                               // id: %4
} // end sil function '$s4Test3BBBC6value2s4Int8Vvg'

// BBB.value3.getter
sil hidden [transparent] @$s4Test3BBBC6value3SSvg : $@convention(method) (@guaranteed BBB) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $BBB):
  debug_value %0 : $BBB, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $BBB, #BBB.value3    // user: %3
  %3 = load %2 : $*String                         // users: %5, %4
  retain_value %3 : $String                       // id: %4
  return %3 : $String                             // id: %5
} // end sil function '$s4Test3BBBC6value3SSvg'

// BBB.__allocating_init(value1:value2:value3:)
sil hidden [exact_self_class] @$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfC : $@convention(method) (Int, Int8, @owned String, @thick BBB.Type) -> @owned BBB {
// %0 "value1"                                    // user: %6
// %1 "value2"                                    // user: %6
// %2 "value3"                                    // user: %6
// %3 "$metatype"
bb0(%0 : $Int, %1 : $Int8, %2 : $String, %3 : $@thick BBB.Type):
  %4 = alloc_ref $BBB                             // user: %6
  // function_ref BBB.init(value1:value2:value3:)
  %5 = function_ref @$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfc : $@convention(method) (Int, Int8, @owned String, @owned BBB) -> @owned BBB // user: %6
  %6 = apply %5(%0, %1, %2, %4) : $@convention(method) (Int, Int8, @owned String, @owned BBB) -> @owned BBB // user: %7
  return %6 : $BBB                                // id: %7
} // end sil function '$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfC'

// BBB.init(value1:value2:value3:)
sil hidden @$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfc : $@convention(method) (Int, Int8, @owned String, @owned BBB) -> @owned BBB {
// %0 "value1"                                    // users: %9, %4
// %1 "value2"                                    // users: %11, %5
// %2 "value3"                                    // users: %15, %14, %12, %6
// %3 "self"                                      // users: %13, %10, %8, %16, %7
bb0(%0 : $Int, %1 : $Int8, %2 : $String, %3 : $BBB):
  debug_value %0 : $Int, let, name "value1", argno 1 // id: %4
  debug_value %1 : $Int8, let, name "value2", argno 2 // id: %5
  debug_value %2 : $String, let, name "value3", argno 3 // id: %6
  debug_value %3 : $BBB, let, name "self", argno 4 // id: %7
  %8 = ref_element_addr %3 : $BBB, #BBB.value1    // user: %9
  store %0 to %8 : $*Int                          // id: %9
  %10 = ref_element_addr %3 : $BBB, #BBB.value2   // user: %11
  store %1 to %10 : $*Int8                        // id: %11
  retain_value %2 : $String                       // id: %12
  %13 = ref_element_addr %3 : $BBB, #BBB.value3   // user: %14
  store %2 to %13 : $*String                      // id: %14
  release_value %2 : $String                      // id: %15
  return %3 : $BBB                                // id: %16
} // end sil function '$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfc'

// BBB.deinit
sil hidden @$s4Test3BBBCfd : $@convention(method) (@guaranteed BBB) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %6, %2, %1
bb0(%0 : $BBB):
  debug_value %0 : $BBB, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $BBB, #BBB.value3    // user: %3
  %3 = begin_access [deinit] [static] %2 : $*String // users: %5, %4
  destroy_addr %3 : $*String                      // id: %4
  end_access %3 : $*String                        // id: %5
  %6 = unchecked_ref_cast %0 : $BBB to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function '$s4Test3BBBCfd'

// BBB.__deallocating_deinit
sil hidden @$s4Test3BBBCfD : $@convention(method) (@owned BBB) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $BBB):
  debug_value %0 : $BBB, let, name "self", argno 1 // id: %1
  // function_ref BBB.deinit
  %2 = function_ref @$s4Test3BBBCfd : $@convention(method) (@guaranteed BBB) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed BBB) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $BBB // user: %5
  dealloc_ref %4 : $BBB                           // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4Test3BBBCfD'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// Int8.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$ss4Int8V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int8.Type) -> Int8 {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int8.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int8"(%0 : $Builtin.IntLiteral) : $(Builtin.Int8, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int8, Builtin.Int1), 0 // user: %4
  %4 = struct $Int8 (%3 : $Builtin.Int8)          // user: %5
  return %4 : $Int8                               // id: %5
} // end sil function '$ss4Int8V22_builtinIntegerLiteralABBI_tcfC'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

sil_vtable BBB {
  #BBB.init!allocator: (BBB.Type) -> (Int, Int8, String) -> BBB : @$s4Test3BBBC6value16value26value3ACSi_s4Int8VSStcfC	// BBB.__allocating_init(value1:value2:value3:)
  #BBB.deinit!deallocator: @$s4Test3BBBCfD	// BBB.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'Test/Test.swift' => 'Test.swift'


